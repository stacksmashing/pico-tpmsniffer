// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// lpc_sniffer //
// ----------- //

#define lpc_sniffer_wrap_target 0
#define lpc_sniffer_wrap 12

static const uint16_t lpc_sniffer_program_instructions[] = {
            //     .wrap_target
    0xf02f, //  0: set    x, 15           side 0     
    0x2085, //  1: wait   1 gpio, 5                  
    0x2005, //  2: wait   0 gpio, 5                  
    0xa042, //  3: nop                               
    0xa042, //  4: nop                               
    0xa042, //  5: nop                               
    0xa042, //  6: nop                               
    0x5804, //  7: in     pins, 4         side 1     
    0xb842, //  8: nop                    side 1     
    0xb342, //  9: nop                    side 0 [3] 
    0x1147, // 10: jmp    x--, 7          side 0 [1] 
    0x8020, // 11: push   block                      
    0x0000, // 12: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program lpc_sniffer_program = {
    .instructions = lpc_sniffer_program_instructions,
    .length = 13,
    .origin = -1,
};

static inline pio_sm_config lpc_sniffer_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + lpc_sniffer_wrap_target, offset + lpc_sniffer_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

static inline void lpc_sniffer_program_init(PIO pio, uint sm, uint offset, uint base_pin, uint debug_pin) {
    pio_sm_config c = lpc_sniffer_program_get_default_config(offset);
    // We have no out pins
    // sm_config_set_out_pins(&c, base_pin, 1);
    //pio_gpio_init(pio, 0);
    for(int i=0; i < 4; i++) {
        pio_gpio_init(pio, base_pin + i);
    }
    //hw_set_bits(&pio->input_sync_bypass, 1);
    // frame pin
    pio_gpio_init(pio, 0);
    pio_gpio_init(pio, 5);
    pio_gpio_init(pio, debug_pin);
    // Set all 4 pins to input (false = input)
    pio_sm_set_consecutive_pindirs(pio, sm, 0, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, base_pin, 4, false);
    sm_config_set_in_pins(&c, base_pin);
    sm_config_set_sideset_pins(&c, debug_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, debug_pin, 1, true);
    sm_config_set_in_shift (&c, false, true, 32);
    // Chain FIFOs together as we will *only* receive.
    // This will ensure we will not block.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    float div = (float)clock_get_hz(clk_sys) / 200000000.0;
    sm_config_set_clkdiv(&c, div);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif

