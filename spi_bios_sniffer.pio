; Modifications by zaphoxx@gmail.com
; All rights reserved. 
; Original Copyright by Thomas Roth. code@stacksmashing.net
; This modification targets tpm sniffing on the SPI Bus where
; the assumption is made that TPM Chip and BIOS Chip are
; communicating on the same SPI bus (shared MISO, MOSI and CLK signal).
; Select Line from the BIOS Chip is used and therefore "active high"
; for the TPM sniffing.

.program spi_bios_sniffer

; IN pin 0 is the data pin (SO)
; IN pin 1 is the clock pin (CLK)
; IN pin 2 is the select pin (SCK)
;
; JMP PIN is pin 2 same as SCK 
; autopush is enabled , threshold 8

; wait for SCK go High
; sample data with each rising clock edge
; If SCK is High then sample bit from SO
; If SCK is Low then wait for next clock cycle
; repeat

.wrap_target
	wait 1 pin 2			; wait for SCK to go High
clock_cycle:
	wait 0 pin 1			; wait for clock low
	wait 1 pin 1			; wait for clock high (sample @ rising edge)
	jmp pin sample_bit 		; make sure SCK is still high before sampling bit
	jmp clock_cycle
sample_bit:
	in pins, 1			; sample data bit from SO
.wrap 

% c-sdk {
static inline void spi_bios_sniffer_program_init(PIO pio, uint sm, uint offset, uint base_pin, uint jmp_pin) {
    pio_sm_config c = spi_bios_sniffer_program_get_default_config(offset);
    
    // initialize 3 input pins SO, CLK, SCK
    for(int i=0; i < 3; i++) {
        pio_gpio_init(pio, base_pin + i);
    }
    // set inner pull up resistor for SCK pin
    gpio_pull_up(base_pin + 2);    
    // initialize JUMP PIN
    pio_gpio_init(pio, jmp_pin);

    // Set all pins to input (false = input)
    pio_sm_set_consecutive_pindirs(pio, sm, base_pin, 3, false);
    sm_config_set_in_pins(&c, base_pin);
    sm_config_set_jmp_pin(&c, jmp_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, jmp_pin, 1, false);

    // set autopush at threshold 8 bit
    sm_config_set_in_shift (&c, false, true, 8);

    // Chain FIFOs together as we will *only* receive.
    // This will ensure we will not block.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // run at max clockrate
    float div = 1.f ; //(float)clock_get_hz(clk_sys) / 135000000.0;
    sm_config_set_clkdiv(&c, div);
    
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
