.program spi_sniffer

; IN pin 0 DI 
; IN pin 1 DO
; IN pin 2 CLK
; IN pin 3 SELECT / JMP_PIN
.side_set 1 opt

flush:
    ;flush isr
    mov isr, null
entry:                         
.wrap_target
    wait 1 pin 3 side 0
clock_cycle:
    wait 0 pin 2 	    	; wait for clock low
	wait 1 pin 2    	    ; wait for clock high (sample @ rising edge)
	jmp pin sample_bits     ; make sure SELECT is still high before sampling bit
    jmp flush side 0        ; flush isr for any partially sampled bits if select pin is low
sample_bits:
	in pins, 2 side 1      	; sample data bit from DO and DI 
.wrap 

% c-sdk {
static inline void spi_sniffer_program_init(PIO pio, uint sm, uint offset, uint base_pin, uint jmp_pin) {
    pio_sm_config c = spi_sniffer_program_get_default_config(offset);
    
    // initialize 4 input pins DI, DO, CLK, SELECT
    for(int i=0; i < 4; i++) {
        pio_gpio_init(pio, base_pin + i);
    }
    //gpio_pull_down(base_pin + 3);
    // Set all pins to input (false = input)
    pio_sm_set_consecutive_pindirs(pio, sm, base_pin, 4, false);
    sm_config_set_in_pins(&c, base_pin);
    sm_config_set_jmp_pin(&c, jmp_pin);
    
    // side set pin gpio 6 for additional monitoring / debug
    pio_gpio_init(pio, 6);
    sm_config_set_sideset_pins(&c, 6);
    pio_sm_set_consecutive_pindirs(pio, sm, 6, 1, true);
    gpio_pull_down(6);
    
    
    // set autopush at threshold 16 bit
    // we are reading DO and DI at the same time ( 2 * 8 bit)
    sm_config_set_in_shift (&c, false, true, 16);
    
    // Chain FIFOs together as we will *only* receive.
    // This will ensure we will not block.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // we do not require specific cycle as we do have the clock signal
    float div = 1.f; //(float) clock_get_hz(clk_sys) / 270000000.0; 
    sm_config_set_clkdiv(&c, div);
    
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
